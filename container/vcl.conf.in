#
# This is Bernhard's config for the varnish caching proxy
# 
# See the VCL chapters in the Users Guide for a comprehensive documentation
# at https://www.varnish-cache.org/docs/.

# Marker to tell the VCL compiler that this VCL has been written with the
# 4.0 or 4.1 syntax.
vcl 4.1;

import std;

acl purge {
    "localhost";
    "127.0.0.1";
    "::1";
}

# Default backend definition. Set this to point to your content server.
backend default {
    .host = "{{backendserver}}";
    .port = "{{backendport}}";
    .probe = {
        .request =
            "HEAD /tumbleweed/repo/oss/media.1/products HTTP/1.1"
            "Host: downloadcontent.opensuse.org"
            "Connection: close"
            "User-Agent: containerized Varnish Health Probe";
        .interval  = 30s;
        .timeout   = 5s;
        .window    = 5;
        .threshold = 3;
    }
    .connect_timeout        = 4s;
    .first_byte_timeout     = 30s;
    .between_bytes_timeout  = 2s;
}

{% if $options{localmirrorserver} %}
backend localmirror {
    .host = "{{localmirrorserver}}";
    .port = "{{localmirrorport}}";
    .probe = {
        .request =
            "HEAD {{localmirrorpath}}tumbleweed/repo/oss/media.1/products HTTP/1.1"
            "Host: downloadcontent.opensuse.org"
            "Connection: close"
            "User-Agent: containerized Varnish Health Probe";
        .interval  = 30s;
        .timeout   = 5s;
        .window    = 5;
        .threshold = 3;
    }
    .connect_timeout        = 4s;
    .first_byte_timeout     = 30s;
    .between_bytes_timeout  = 2s;
}

{% endif %}
sub vcl_recv {
    # Happens before we check if we have this in cache already.
    #
    # Typically you clean up the request here, removing cookies you don't need,
    # rewriting the request, etc.
    
    if (req.method == "PURGE") {
        if (!client.ip ~ purge) {
            return (synth(405, client.ip + " is not allowed to send PURGE requests."));
        }
        return (purge);
    }
    unset req.http.Cookie;
    unset req.http.Authorization;

    if (req.restarts == 0) {
        set req.http.X-Forwarded-For = client.ip;
{% if $options{localmirrorserver} %}
        if (std.healthy(localmirror) && (req.url ~ "-[a-z]*.xml.gz" || (req.url ~ "\.rpm" && req.url !~ "/boot/"))) {
            set req.backend_hint = localmirror;
            {% if $options{localmirrorpath} ne "/" %}
            set req.url = regsub(req.url, "^/", "{{localmirrorpath}}");
            {% endif %}
        }
{% endif %}
    }
    if (std.healthy(req.backend_hint)) {
        set req.grace = {{grace}}s;
    }
}

# generate synthetic replies without backend server
sub vcl_synth {
}

sub vcl_backend_fetch {
    if (bereq.retries > 0) { # if the local tumbleweed mirror failed, we fallback to the default backend
        set bereq.backend = default;
        {% if $options{localmirrorpath} ne "/" %}
        set bereq.url = regsub(bereq.url, "^{{localmirrorpath}}", "/");
        {% endif %}
    }
}

sub vcl_backend_response {
    # Happens after we have read the response headers from the backend.
    #
    # Here you clean the response headers, removing silly Set-Cookie headers
    # and other mistakes your backend does.

    # set cache timeout
    
    set beresp.ttl = {{ttl}}s;
    set beresp.grace = 6h; # ontop of ttl ; only used when backend is down (!healthy)
    #set beresp.grace = 10m;
    set beresp.keep = 4w;

{% if $options{localmirrorserver} %}
    if (bereq.backend == localmirror) {
        if (beresp.status >= 300 && bereq.retries < 1) {
            return(retry);
        }
    }
{% endif %}

    If (bereq.url ~ "\.rpm$") {
         if (beresp.grace < 5m) {
             set beresp.grace = 5m;
         }
    }
    If (bereq.url ~ "-[a-z]*.xml.gz") {
         set beresp.grace = 6h;
    }
    #If (bereq.url ~ "\.iso$") {
    #     set beresp.ttl = 1h;
    #}
    If (bereq.url ~ "/boot/") {
         set beresp.ttl = 10s;
    }
}

sub vcl_deliver {
    # Happens when we have all the pieces we need, and are about to send the
    # response to the client.
    #
    # You can do accounting or modifying the final object here.
}
